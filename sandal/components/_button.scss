@use "../config" as *;
@use "../utils" as *;

$_radius: Map-Deep-Search($settings, "border-radius");
$_border-thickness: .19rem;
$_width: (
    max: 15rem,
    min: 3rem,
    large: 12.5rem,
    medium: 8rem,
    small: 5rem,
);
$_height: (
    max: 4rem,
    min: 1rem,
    large: 4rem,
    medium: 3rem,
    small: 2rem,
);
$_font: (
    max: 2.5rem,
    min: .5rem,
    large: 2rem,
    medium: 1rem,
    small: .75rem,
);
$_padding: (
    max: 1.25rem,
    min: .5rem,
    large: 1.5rem,
    medium: 1rem,
    small: .5rem,
);

/// A button for all your button needs
/// @param {string} $type [secondary] - The type of button as per the theme sheet
/// @param {string} $size [large] - The size of the button. Can be large, medium, or small
/// @param {bool} $outline [false] - Determines if the button styles are that of an outline
@mixin Button(
    $type: "secondary", 
    $size: "medium", 
    $outline: false,
) {
    $type-checked: Check-Types(($type, "string"), ($size, ("string", "percent")), ($outline, "bool"));

    @if nth($type-checked, 2) == "percent" {
        min-width: Lerp(map-get($_width, "min"), map-get($_width, "max"), $size / 100%);
        min-height: Lerp(map-get($_height, "min"), map-get($_height, "max"), $size / 100%);
        font-size: Lerp(map-get($_font, "min"), map-get($_font, "max"), $size / 100%);
        padding: Lerp(map-get($_padding, "min"), map-get($_padding, "max"), $size / 100%);
    } @else {
        min-width: map-get($_width, $size);
        min-height: map-get($_height, $size);
        font-size: map-get($_font, $size);
        padding: map-get($_padding, $size);
    }

    font-weight: bold;
    letter-spacing: 0.05rem;
    transition: background-color .25s, color .25s;
    border-radius: $_radius;

    @if $outline {
        background-color: transparent;
        border: Theme($type) solid $_border-thickness;
        color: Theme($type);
    } @else {
        color: Theme("text-light");
        background-color: Theme($type);
    }

    &:hover {
        background-color: Theme("#{$type}-light");
        color: Theme("text-light");
    }
}

/// A button for all your button needs
/// @param {string} $direction [row] - The direction of the buttons, row or column
/// @param {string} $size [large] - The size of the button. Can be large, medium, or small
/// @param {bool} $outline [false] - Determines if the button styles are that of an outline
@mixin Button-Toolbar($direction: row, $button-styles: ()) {
    @include Flex-Center($direction);

    & > * {
        @include Button($button-styles...);
        border-radius: 0;

        @if $direction == row {
            border-width: $_border-thickness $_border-thickness / 2;
        } @else {
            border-width: $_border-thickness / 2 $_border-thickness;
        }
        
        &:nth-of-type(1) {
            border-top-left-radius: $_radius;
            @if $direction == row {
                border-left-width: $_border-thickness;
                border-bottom-left-radius: $_radius;
            } @else if $direction == column {
                border-top-width: $_border-thickness;
                border-top-right-radius: $_radius;
            }
        }

        &:nth-last-of-type(1) {
            border-bottom-right-radius: $_radius;
            @if $direction == row {
                border-right-width: $_border-thickness;
                border-top-right-radius: $_radius;
            } @else if $direction == column {
                border-bottom-width: $_border-thickness;
                border-bottom-left-radius: $_radius;
            }
        }
    }
}

