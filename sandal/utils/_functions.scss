@use "sass:meta";
@use "../config" as *;
@use "./type" as *;

@use "../themes/light";
@use "../themes/dark";
@use "../themes/default";

// Z-Indexing / Layers
// Gives names to the z-index layers
// The closer to heigher on the list the heigher the z-index
$layers: (
    "top",
    "below",
    "destroyed"
);
@function Layer($name) {
    @if index($layers, $name) {
        @return (length($layers) - index($layers, $name)) + 1;
    } @else {
        @error 'There is no item "#{$name}" in this list; choose one of: #{$layers}';
        @return null;
    }
}

// Merges multiple maps
@function Map-Merge-Multiple($maps...) {
    $result: ();
    @each $map in $maps {
        $result: map-merge($result, $map);
    };
    @return $result;
}

// Map Deep Search
@function Map-Deep-Search($map, $find) {
    $nested: ();
    @each $key, $val in $map {
        @if $find == $key {
            @return $val;
        } @else if Is-Map($val) {
            $nested: append($nested, $val);
        }
    }

    @each $nest in $nested {
        $found: Map-Deep-Search($nest, $find);
        @if $found {
            @return $found;
        }
    }

    @return null;
}

// Includes
@function Includes($obj, $find) {
    @if Is-List($obj) {
        @each $item in $obj {
            @if $item == $find {
                @return true;
            }
        }
    } @else if Is-Map($obj) {
        @each $item in map-keys($obj) {
            @if $item == $find {
                @return true;
            }
        }
    }
    @return false
};

// Gets a theme
$_theme: module-variables(Map-Deep-Search($settings, "base-theme"));
@function Theme($key) {
    @return map-get($_theme, $key);
}