// --- Type Checking For Sass?? --- //

/// Checks the type of a value which is used in everything
/// @param {string | number | color | list | map | bool | null | function | arglist} $val - The value to be type checked
/// @param {string} $type - The type to be check, if the val is the same type as this then it returns true
/// @return {bool} - A boolean which tells if the type-of the val matches the provided type 
@function Is-Type($val, $type) {
    @if type-of($val) == $type {
        @return true;
    } @else {
        @return false;
    }
}

/// Checks if the provided value is of type number
/// @param {string | number | color | list | map | bool | null | function | arglist} $val - The value to be type checked
/// @return {bool} - A boolean which tells if the type-of the val is a number
@function Is-Number($val) {
    @return Is-Type($val, "number")
};

/// Checks if the provided value is of type color
/// @param {string | number | color | list | map | bool | null | function | arglist} $val - The value to be type checked
/// @return {bool} - A boolean which tells if the type-of the val is a color
@function Is-Color($val) {
    @return Is-Type($val, "color")
};

/// Checks if the provided value is of type list
/// @param {string | number | color | list | map | bool | null | function | arglist} $val - The value to be type checked
/// @return {bool} - A boolean which tells if the type-of the val is a list
@function Is-List($val) {
    @return Is-Type($val, "list")
};

/// Checks if the provided value is of type map
/// @param {string | number | color | list | map | bool | null | function | arglist} $val - The value to be type checked
/// @return {bool} - A boolean which tells if the type-of the val is a map
@function Is-Map($val) {
    @return Is-Type($val, "map")
};

/// Checks if the provided value is of type bool
/// @param {string | number | color | list | map | bool | null | function | arglist} $val - The value to be type checked
/// @return {bool} - A boolean which tells if the type-of the val is a bool
@function Is-Bool($val) {
    @return Is-Type($val, "bool")
};

/// Checks if the provided value is of type Null
/// @param {string | number | color | list | map | bool | null | function | arglist} $val - The value to be type checked
/// @return {bool} - A boolean which tells if the type-of the val is a Null
@function Is-Null($val) {
    @return Is-Type($val, "null")
};

/// Checks if the provided value is of type function
/// @param {string | number | color | list | map | bool | null | function | arglist} $val - The value to be type checked
/// @return {bool} - A boolean which tells if the type-of the val is a function
@function Is-Function($val) {
    @return Is-Type($val, "fucntion")
};

/// Checks if the provided value is of type arglist
/// @param {string | number | color | list | map | bool | null | function | arglist} $val - The value to be type checked
/// @return {bool} - A boolean which tells if the type-of the val is a arglist
@function Is-Arglist($val) {
    @return Is-Type($val, "argList")
};

/// Checks the type of multiple values
/// @param {list | arglist} $val - The value to be type checked
/// @param {list | arglist} $type - The types to be check, if the vals is the same type as this then it returns true
/// @return {bool} - A boolean which tells if the type-of the vals matches the provided types 
@function Check-Types($vals, $types) {
    $all-correct: true;
    $found: ();
    
    // Checks if vals and types are the same length
    @if length($vals) != length($types) {@return false; }

    // Compares the types
    @each $val in $vals {
        $curr-type: nth($types, index($vals, $val));
        @if Is-List($curr-type) {
            $some-correct: false;
            @each $type in $curr-type {
                @if type-of($val) == $type {
                    $some-correct: true;
                    $found: append($found, $type);
                }
            }
            $all-correct: $some-correct;
        } @else {
            @if type-of($val) != $curr-type {
                $all-correct: false;
            } @else {
                $found: append($found, $curr-type);
            }
        }
    }

    @if not $all-correct {
        @error "The types do not match the values, this is required for proper type checking";
    } @else {
        @return $found;
    }
}